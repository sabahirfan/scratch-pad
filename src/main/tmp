package com.crd.otc.referencedata.db.security.fixedincome;

import com.crd.alpha.otc.api.common.enums.BusinessDayConventionType;
import com.crd.alpha.otc.api.common.enums.FixedCouponBondYieldConventionType;
import com.crd.otc.referencedata.db.config.CurrencyDbo;
import com.crd.otc.referencedata.db.config.LegalEntityDbo;
import com.crd.otc.referencedata.db.convention.bond.BondScheduleConventionDbo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.mock;

class FixedCouponBondDboTest {

    private static final String SECURITY_ID = "TEST-FIXED-COUPON-001";
    private static final Integer SETTLEMENT_OFFSET_DAYS = 2;
    private static final String SETTLEMENT_OFFSET_CALENDAR = "TARGET";
    private static final BusinessDayConventionType SETTLEMENT_OFFSET_CONVENTION = BusinessDayConventionType.FOLLOWING;
    private static final LocalDate ISSUE_DATE = LocalDate.of(2024, 1, 1);
    private static final LocalDate DATED_DATE = LocalDate.of(2024, 1, 1);
    private static final LocalDate MATURITY_DATE = LocalDate.of(2029, 1, 1);
    private static final Double COUPON = 0.02;
    private static final Double FACE_VALUE = 1000.0;
    private static final FixedCouponBondYieldConventionType YIELD_CONVENTION = FixedCouponBondYieldConventionType.US_STREET;
    private static final Integer EX_COUPON_OFFSET_DAYS = 7;
    private static final String EX_COUPON_OFFSET_CALENDAR = "TARGET";
    private static final BusinessDayConventionType EX_COUPON_OFFSET_CONVENTION = BusinessDayConventionType.FOLLOWING;

    private LegalEntityDbo legalEntity;
    private CurrencyDbo currency;
    private BondScheduleConventionDbo scheduleConvention;
    private FixedCouponBondDbo fixedCouponBondDbo;

    @BeforeEach
    void setUp() {
        legalEntity = mock(LegalEntityDbo.class);
        currency = mock(CurrencyDbo.class);
        scheduleConvention = mock(BondScheduleConventionDbo.class);
        fixedCouponBondDbo = new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION);
    }

    @Test
    void testConstructor() {
        assertEquals(SECURITY_ID, fixedCouponBondDbo.getSecurityId());
        assertEquals(legalEntity, fixedCouponBondDbo.getIssuer());
        assertEquals(currency, fixedCouponBondDbo.getCurrency());
        assertEquals(SETTLEMENT_OFFSET_DAYS, fixedCouponBondDbo.getSettlementOffsetDays());
        assertEquals(SETTLEMENT_OFFSET_CALENDAR, fixedCouponBondDbo.getSettlementOffsetCalendar());
        assertEquals(SETTLEMENT_OFFSET_CONVENTION, fixedCouponBondDbo.getSettlementOffsetConvention());
        assertEquals(ISSUE_DATE, fixedCouponBondDbo.getIssueDate());
        assertEquals(DATED_DATE, fixedCouponBondDbo.getDatedDate());
        assertEquals(MATURITY_DATE, fixedCouponBondDbo.getMaturityDate());
        assertEquals(COUPON, fixedCouponBondDbo.getCoupon());
        assertEquals(FACE_VALUE, fixedCouponBondDbo.getFaceValue());
        assertEquals(scheduleConvention, fixedCouponBondDbo.getScheduleConvention());
        assertEquals(YIELD_CONVENTION, fixedCouponBondDbo.getYieldConvention());
        assertEquals(EX_COUPON_OFFSET_DAYS, fixedCouponBondDbo.getExCouponOffsetDays());
        assertEquals(EX_COUPON_OFFSET_CALENDAR, fixedCouponBondDbo.getExCouponOffsetCalendar());
        assertEquals(EX_COUPON_OFFSET_CONVENTION, fixedCouponBondDbo.getExCouponOffsetConvention());
        assertEquals(BondType.FIXED_COUPON, fixedCouponBondDbo.getBondType());
    }

    @Test
    void testDefaultConstructor() {
        FixedCouponBondDbo defaultBond = new FixedCouponBondDbo();
        assertNotNull(defaultBond);
        assertEquals(BondType.FIXED_COUPON, defaultBond.getBondType());
    }

    @Test
    void testConstructorWithNullIssueDate() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, null, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION));
    }

    @Test
    void testConstructorWithNullDatedDate() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, null, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION));
    }

    @Test
    void testConstructorWithNullMaturityDate() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, null,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION));
    }

    @Test
    void testConstructorWithNullCoupon() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    null, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION));
    }

    @Test
    void testConstructorWithNullFaceValue() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, null, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION));
    }

    @Test
    void testConstructorWithNullScheduleConvention() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, null, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION));
    }

    @Test
    void testConstructorWithNullYieldConvention() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, null, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION));
    }

    @Test
    void testConstructorWithNullExCouponOffsetDays() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, null,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION));
    }

    @Test
    void testConstructorWithNullExCouponOffsetCalendar() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    null, EX_COUPON_OFFSET_CONVENTION));
    }

    @Test
    void testConstructorWithNullExCouponOffsetConvention() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, null));
    }

    @Test
    void testConstructorWithNegativeCoupon() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    -0.01, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION));
    }

    @Test
    void testConstructorWithZeroFaceValue() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, 0.0, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION));
    }

    @Test
    void testConstructorWithIssueDateAfterMaturityDate() {
        LocalDate laterIssueDate = MATURITY_DATE.plusDays(1);
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, laterIssueDate, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION));
    }

    @Test
    void testConstructorWithNegativeExCouponOffsetDays() {
        assertThrows(IllegalArgumentException.class, () -> 
            new FixedCouponBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, -1,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION));
    }
} 
======

package com.crd.otc.referencedata.db.security.fixedincome;

import com.crd.alpha.otc.api.common.enums.BusinessDayConventionType;
import com.crd.alpha.otc.api.common.enums.CapitalIndexedBondYieldConventionType;
import com.crd.alpha.otc.api.common.enums.PriceIndexCalculationMethod;
import com.crd.otc.referencedata.db.config.CurrencyDbo;
import com.crd.otc.referencedata.db.config.LegalEntityDbo;
import com.crd.otc.referencedata.db.convention.bond.BondScheduleConventionDbo;
import com.crd.otc.referencedata.db.index.InflationIndexDbo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.mock;

class CapitalIndexedBondDboTest {

    private static final String SECURITY_ID = "TEST-CAP-INDEX-001";
    private static final Integer SETTLEMENT_OFFSET_DAYS = 2;
    private static final String SETTLEMENT_OFFSET_CALENDAR = "TARGET";
    private static final BusinessDayConventionType SETTLEMENT_OFFSET_CONVENTION = BusinessDayConventionType.FOLLOWING;
    private static final LocalDate ISSUE_DATE = LocalDate.of(2024, 1, 1);
    private static final LocalDate DATED_DATE = LocalDate.of(2024, 1, 1);
    private static final LocalDate MATURITY_DATE = LocalDate.of(2029, 1, 1);
    private static final Double COUPON = 0.02;
    private static final Double FACE_VALUE = 1000.0;
    private static final CapitalIndexedBondYieldConventionType YIELD_CONVENTION = CapitalIndexedBondYieldConventionType.REAL;
    private static final Integer EX_COUPON_OFFSET_DAYS = 7;
    private static final String EX_COUPON_OFFSET_CALENDAR = "TARGET";
    private static final BusinessDayConventionType EX_COUPON_OFFSET_CONVENTION = BusinessDayConventionType.FOLLOWING;
    private static final String INFLATION_LAG = "3M";
    private static final PriceIndexCalculationMethod PRICE_INDEX_CALCULATION_METHOD = PriceIndexCalculationMethod.INTERPOLATED;
    private static final Double BASE_CPI = 100.0;

    private LegalEntityDbo legalEntity;
    private CurrencyDbo currency;
    private BondScheduleConventionDbo scheduleConvention;
    private InflationIndexDbo inflationIndex;
    private CapitalIndexedBondDbo capitalIndexedBondDbo;

    @BeforeEach
    void setUp() {
        legalEntity = mock(LegalEntityDbo.class);
        currency = mock(CurrencyDbo.class);
        scheduleConvention = mock(BondScheduleConventionDbo.class);
        inflationIndex = mock(InflationIndexDbo.class);
        capitalIndexedBondDbo = new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                PRICE_INDEX_CALCULATION_METHOD, BASE_CPI);
    }

    @Test
    void testConstructor() {
        assertEquals(SECURITY_ID, capitalIndexedBondDbo.getSecurityId());
        assertEquals(legalEntity, capitalIndexedBondDbo.getIssuer());
        assertEquals(currency, capitalIndexedBondDbo.getCurrency());
        assertEquals(SETTLEMENT_OFFSET_DAYS, capitalIndexedBondDbo.getSettlementOffsetDays());
        assertEquals(SETTLEMENT_OFFSET_CALENDAR, capitalIndexedBondDbo.getSettlementOffsetCalendar());
        assertEquals(SETTLEMENT_OFFSET_CONVENTION, capitalIndexedBondDbo.getSettlementOffsetConvention());
        assertEquals(ISSUE_DATE, capitalIndexedBondDbo.getIssueDate());
        assertEquals(DATED_DATE, capitalIndexedBondDbo.getDatedDate());
        assertEquals(MATURITY_DATE, capitalIndexedBondDbo.getMaturityDate());
        assertEquals(COUPON, capitalIndexedBondDbo.getCoupon());
        assertEquals(FACE_VALUE, capitalIndexedBondDbo.getFaceValue());
        assertEquals(scheduleConvention, capitalIndexedBondDbo.getScheduleConvention());
        assertEquals(YIELD_CONVENTION, capitalIndexedBondDbo.getYieldConvention());
        assertEquals(EX_COUPON_OFFSET_DAYS, capitalIndexedBondDbo.getExCouponOffsetDays());
        assertEquals(EX_COUPON_OFFSET_CALENDAR, capitalIndexedBondDbo.getExCouponOffsetCalendar());
        assertEquals(EX_COUPON_OFFSET_CONVENTION, capitalIndexedBondDbo.getExCouponOffsetConvention());
        assertEquals(inflationIndex, capitalIndexedBondDbo.getInflationIndex());
        assertEquals(INFLATION_LAG.toUpperCase(), capitalIndexedBondDbo.getInflationLag());
        assertEquals(PRICE_INDEX_CALCULATION_METHOD, capitalIndexedBondDbo.getPriceIndexCalculationMethod());
        assertEquals(BASE_CPI, capitalIndexedBondDbo.getBaseCpi());
        assertEquals(BondType.CAPITAL_INDEXED, capitalIndexedBondDbo.getBondType());
    }

    @Test
    void testDefaultConstructor() {
        CapitalIndexedBondDbo defaultBond = new CapitalIndexedBondDbo();
        assertNotNull(defaultBond);
        assertEquals(BondType.CAPITAL_INDEXED, defaultBond.getBondType());
    }

    @Test
    void testConstructorWithNullIssueDate() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, null, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithNullDatedDate() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, null, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithNullMaturityDate() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, null,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithNullCoupon() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    null, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithNullFaceValue() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, null, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithNullScheduleConvention() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, null, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithNullYieldConvention() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, null, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithNullExCouponOffsetDays() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, null,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithNullExCouponOffsetCalendar() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    null, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithNullExCouponOffsetConvention() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, null, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithNullInflationIndex() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, null, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithNullInflationLag() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, null,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithNullPriceIndexCalculationMethod() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    null, BASE_CPI));
    }

    @Test
    void testConstructorWithNullBaseCpi() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, null));
    }

    @Test
    void testConstructorWithNegativeCoupon() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    -0.01, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithZeroFaceValue() {
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, ISSUE_DATE, DATED_DATE, MATURITY_DATE,
                    COUPON, 0.0, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }

    @Test
    void testConstructorWithIssueDateAfterMaturityDate() {
        LocalDate laterIssueDate = MATURITY_DATE.plusDays(1);
        assertThrows(IllegalArgumentException.class, () -> 
            new CapitalIndexedBondDbo(SECURITY_ID, legalEntity, currency, SETTLEMENT_OFFSET_DAYS,
                    SETTLEMENT_OFFSET_CALENDAR, SETTLEMENT_OFFSET_CONVENTION, laterIssueDate, DATED_DATE, MATURITY_DATE,
                    COUPON, FACE_VALUE, scheduleConvention, YIELD_CONVENTION, EX_COUPON_OFFSET_DAYS,
                    EX_COUPON_OFFSET_CALENDAR, EX_COUPON_OFFSET_CONVENTION, inflationIndex, INFLATION_LAG,
                    PRICE_INDEX_CALCULATION_METHOD, BASE_CPI));
    }
} 
